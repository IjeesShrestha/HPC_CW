
#include <stdio.h>
#include <math.h>
#include <cuda_runtime_api.h>
#include <time.h>
#include <errno.h>


/******************************************************************************
 * This program takes an initial estimate of m and c and finds the associated
 * rms error. It is then as a base to generate and evaluate 8 new estimates,
 * which are steps in different directions in m-c space. The best estimate is
 * then used as the base for another iteration of "generate and evaluate". This
 * continues until none of the new estimates are better than the base. This is
 * a gradient search for a minimum in mc-space.
 *
 * To compile:
 *   nvcc -o cudalinear cudalinear.cu -lm
 *
 * To run:
 *   ./culinear
 *
 * Dr Kevan Buckley, University of Wolverhampton, 2018
 *****************************************************************************/

typedef struct point_t {
  double x;
  double y;
} point_t;

int n_data = 1000;
__device__ int d_n_data = 1000;

point_t data[] = {
  {65.81,87.38},{72.90,118.21},{77.40,88.47},{65.41,107.59},
  {68.39,100.80},{65.10,100.72},{76.81,114.25},{45.13,53.15},
  {84.47,105.21},{72.92,107.25},{65.65,96.05},{78.17,113.36},
  {73.85,114.98},{ 0.33,14.57},{64.63,107.41},{24.45,54.00},
  {15.15,45.77},{ 0.28,46.28},{96.38,139.89},{44.52,70.92},
  {44.30,79.25},{24.39,58.90},{58.83,97.89},{16.79,55.55},
  {13.14,42.80},{38.98,65.76},{33.83,71.29},{98.51,133.05},
  {97.09,120.21},{71.67,126.60},{35.35,65.99},{ 9.05,26.87},
  {13.90,50.38},{89.17,120.10},{ 4.17,40.36},{63.26,88.44},
  {49.74,62.53},{42.26,70.63},{ 5.78,29.25},{91.88,116.13},
  {40.87,53.48},{20.81,25.69},{51.18,68.64},{30.15,57.19},
  {96.42,118.95},{ 4.95,33.49},{89.59,104.76},{38.36,70.06},
  {92.71,106.58},{81.66,128.59},{51.40,76.25},{59.57,63.44},
  {63.78,82.14},{89.22,124.14},{61.36,95.74},{80.37,109.67},
  {56.21,85.45},{ 2.80,44.92},{90.24,133.08},{51.35,81.53},
  {78.91,104.83},{88.20,135.46},{16.42,33.28},{95.26,134.58},
  {46.19,73.47},{84.98,117.23},{97.88,137.02},{30.19,47.09},
  {74.49,105.88},{94.24,128.95},{82.85,114.70},{58.28,93.54},
  {90.31,109.26},{58.56,84.59},{30.00,51.83},{48.17,61.55},
  { 7.20,31.78},{24.09,49.82},{28.60,33.01},{77.83,108.61},
  {76.55,118.98},{15.33,40.99},{12.13,25.02},{ 0.18,-0.23},
  {60.00,94.05},{71.12,99.75},{24.67,29.91},{74.88,88.04},
  {38.52,68.09},{ 3.49,38.47},{20.54,35.57},{35.19,53.19},
  {95.24,111.78},{99.61,145.71},{98.85,144.81},{42.00,74.07},
  {49.73,75.49},{35.22,72.25},{70.71,92.10},{48.18,72.34},
  {49.17,85.03},{24.42,42.77},{44.89,78.82},{22.28,50.98},
  {23.05,49.93},{53.95,78.54},{31.01,60.21},{96.44,109.14},
  {41.10,46.85},{45.76,62.19},{85.24,123.89},{22.25,53.16},
  { 0.23,31.46},{77.45,109.57},{78.39,119.95},{18.65,50.69},
  {44.72,72.80},{84.36,122.50},{79.50,105.55},{27.99,44.95},
  {93.50,114.99},{94.33,132.93},{81.63,106.14},{33.17,47.32},
  { 2.83,23.43},{44.61,58.97},{72.39,115.85},{90.52,126.16},
  {48.86,67.37},{77.33,111.16},{ 9.08,29.19},{21.67,50.13},
  {77.10,96.05},{76.50,105.17},{99.71,149.98},{37.41,69.26},
  {70.43,93.39},{80.77,126.23},{43.66,63.07},{12.85,45.35},
  {98.06,124.90},{41.10,64.12},{35.97,60.69},{38.71,55.60},
  { 2.14,40.29},{90.91,151.38},{93.77,145.91},{67.27,82.55},
  { 1.42,29.26},{25.46,44.50},{70.09,90.91},{85.12,115.81},
  {94.16,129.42},{39.61,68.97},{36.98,59.17},{93.47,116.97},
  {54.24,62.15},{53.79,69.73},{ 4.32,24.32},{88.68,118.12},
  {18.14,49.44},{36.98,46.69},{74.56,96.68},{49.64,72.78},
  {20.45,37.54},{ 2.40,27.41},{35.66,52.31},{39.44,79.96},
  {22.68,41.68},{23.70,52.95},{25.18,44.70},{99.44,133.55},
  {81.16,121.77},{57.10,103.09},{14.77,26.68},{54.90,95.48},
  {18.52,50.74},{48.10,84.68},{88.41,98.37},{79.37,122.53},
  {69.86,94.83},{17.12,40.37},{92.66,130.88},{20.08,55.73},
  {81.34,107.94},{57.56,91.79},{44.58,57.95},{99.77,148.53},
  {56.64,72.05},{11.14,49.18},{39.58,70.09},{ 5.73,42.48},
  {36.50,55.87},{94.24,110.20},{58.75,91.70},{58.35,83.01},
  {99.47,130.50},{ 3.96,22.49},{98.24,135.43},{51.95,93.09},
  {75.54,95.08},{72.36,114.08},{64.42,93.75},{63.08,90.94},
  {83.74,106.25},{18.83,47.42},{75.87,108.91},{50.50,89.23},
  {38.59,75.37},{20.17,48.24},{77.03,85.44},{54.84,79.55},
  {27.12,41.50},{10.64,38.90},{22.99,54.94},{75.89,106.58},
  {31.39,55.05},{24.82,31.71},{53.66,95.08},{36.98,60.06},
  {74.90,101.79},{13.70,54.76},{70.47,99.79},{38.88,58.02},
  {66.46,93.98},{59.48,78.00},{13.24,34.20},{ 3.76,21.77},
  {77.82,107.58},{91.69,118.95},{57.02,78.32},{ 1.75,30.01},
  {12.55,20.12},{87.44,104.50},{48.82,80.56},{72.26,106.88},
  {12.92,44.85},{59.27,82.39},{40.51,89.00},{75.39,101.31},
  {77.08,117.72},{40.32,81.82},{91.33,134.80},{79.55,104.14},
  {11.75,30.53},{69.02,96.98},{22.04,51.30},{97.40,127.96},
  {95.43,126.75},{77.00,109.23},{61.70,90.35},{93.44,130.30},
  {72.30,102.71},{86.54,122.88},{75.34,115.97},{56.51,96.52},
  {32.64,67.55},{72.07,94.49},{90.64,128.69},{37.91,57.01},
  {12.37,43.51},{88.79,125.36},{37.05,64.82},{49.94,90.08},
  {88.68,107.35},{ 3.09,29.11},{47.01,79.12},{67.98,112.89},
  {97.19,138.26},{56.23,68.81},{48.32,87.27},{19.70,49.36},
  {39.76,69.54},{48.80,77.83},{26.77,55.12},{78.56,113.93},
  {12.28,33.90},{59.51,101.77},{92.96,129.75},{81.01,120.43},
  {12.01,42.38},{ 0.36,27.48},{64.25,100.16},{53.09,79.98},
  {36.87,58.09},{31.19,55.74},{64.70,92.49},{30.47,46.11},
  {93.79,112.41},{ 6.99,21.48},{59.56,99.83},{33.98,60.65},
  {23.46,56.41},{53.28,71.68},{30.62,60.97},{14.48,39.54},
  {29.29,53.98},{12.81,57.73},{97.01,121.41},{ 2.03, 8.88},
  {78.45,115.69},{23.69,58.73},{50.75,89.57},{39.75,74.13},
  {87.36,116.09},{54.60,66.35},{64.62,84.37},{76.67,97.28},
  {14.66,30.89},{70.14,87.91},{33.44,39.77},{58.46,78.29},
  {62.26,90.57},{94.67,134.47},{74.59,103.44},{30.52,51.76},
  {28.35,41.10},{19.76,54.90},{62.84,95.93},{19.28,48.85},
  {23.58,59.14},{38.58,62.58},{85.26,122.14},{57.10,91.95},
  {97.32,140.55},{78.76,112.84},{23.29,56.56},{38.39,66.48},
  {49.15,56.86},{63.09,77.86},{94.98,126.51},{13.47,26.95},
  {48.25,71.43},{95.26,113.80},{92.84,126.59},{15.16,37.67},
  {57.77,93.46},{14.24,33.32},{19.52,66.74},{86.64,121.83},
  {62.00,97.94},{54.40,60.70},{71.79,103.07},{63.44,108.91},
  {74.05,98.39},{11.05,39.38},{56.27,87.13},{ 1.16,20.87},
  {19.94,42.81},{63.72,85.45},{15.66,48.37},{55.71,84.32},
  {94.51,135.72},{84.50,125.25},{14.69,49.10},{ 6.40,25.36},
  {67.53,98.23},{65.51,102.29},{70.49,85.68},{28.51,56.73},
  {56.60,90.13},{84.41,118.53},{87.26,101.68},{ 7.92,28.72},
  {41.57,75.87},{24.12,48.46},{72.71,93.53},{45.09,83.56},
  {23.19,44.90},{90.57,123.80},{26.00,61.73},{45.99,72.98},
  {74.84,108.04},{82.56,122.38},{13.75,18.57},{ 3.72,32.49},
  {23.25,46.74},{20.48,47.20},{95.30,133.69},{88.74,122.92},
  {77.89,107.48},{66.21,86.09},{33.97,51.93},{12.03,26.12},
  {38.06,64.59},{66.13,95.85},{72.76,96.57},{ 1.96,27.78},
  {43.75,65.69},{17.91,24.10},{98.94,130.76},{39.67,78.99},
  {36.14,68.89},{85.61,109.78},{56.04,94.65},{35.69,78.83},
  {39.44,59.60},{ 9.76,15.87},{86.72,118.17},{72.85,109.01},
  {80.01,115.57},{50.87,65.61},{25.61,42.56},{67.41,87.56},
  {35.66,55.89},{40.08,69.35},{29.97,51.67},{15.30,40.21},
  {97.83,107.48},{62.69,85.89},{75.09,96.17},{23.40,51.34},
  {25.78,51.86},{30.59,60.97},{ 7.88,34.45},{47.55,77.57},
  {31.73,71.05},{51.96,78.98},{78.88,116.33},{24.54,53.64},
  {54.36,77.84},{30.37,66.65},{73.95,108.12},{ 4.09,24.91},
  {75.81,107.77},{88.40,119.02},{68.84,88.79},{15.95,33.59},
  {68.54,101.60},{35.45,56.60},{71.05,91.87},{85.09,116.38},
  {49.08,69.14},{48.64,76.07},{73.75,125.68},{23.11,45.38},
  {53.24,79.19},{77.61,111.09},{74.21,104.61},{53.83,80.93},
  {24.98,61.83},{71.93,91.34},{33.74,71.72},{93.22,121.66},
  {29.32,42.25},{54.57,87.05},{75.89,99.71},{10.57,23.00},
  {82.08,111.23},{32.54,61.33},{54.06,64.84},{43.35,52.19},
  {16.71,32.44},{60.16,98.87},{73.76,103.66},{20.44,41.97},
  {21.55,36.27},{36.32,69.36},{40.83,76.38},{45.10,88.33},
  {62.66,96.52},{21.28,43.92},{67.34,109.53},{58.82,84.47},
  {12.72,46.60},{38.37,59.60},{13.07,52.79},{42.20,88.97},
  {78.33,106.76},{38.43,66.52},{ 8.91,34.94},{10.13,31.06},
  { 4.59,18.51},{15.66,42.31},{22.97,37.08},{96.88,125.59},
  {27.92,50.49},{21.04,57.69},{55.64,76.29},{78.87,114.81},
  {68.23,103.19},{63.48,91.68},{57.02,82.94},{14.23,36.60},
  {41.16,64.77},{50.10,89.79},{34.71,52.94},{65.26,102.67},
  { 5.22,30.32},{58.61,92.82},{65.66,96.70},{80.78,97.89},
  { 9.69,21.45},{41.27,69.82},{23.91,34.50},{13.65,29.82},
  {41.57,58.05},{80.09,117.35},{43.65,82.53},{35.68,77.02},
  {31.80,48.94},{33.87,57.22},{51.24,78.60},{66.89,112.13},
  {45.31,70.94},{10.71,40.31},{24.01,55.14},{31.55,77.69},
  {13.28,41.14},{ 9.62,34.14},{ 3.84,30.38},{ 4.76,20.10},
  {83.61,94.90},{22.48,53.04},{41.14,70.81},{40.73,76.97},
  {32.81,43.73},{15.55,37.19},{80.81,99.32},{34.60,74.98},
  {96.66,147.48},{89.87,129.78},{40.29,55.41},{87.56,115.38},
  {21.93,48.87},{55.33,66.74},{46.73,66.02},{ 0.01,12.30},
  {68.05,106.26},{38.76,68.64},{68.03,110.74},{81.07,116.31},
  {77.85,114.89},{31.11,46.33},{15.36,35.44},{41.99,60.11},
  {30.70,33.29},{75.91,91.48},{79.41,97.10},{70.15,99.08},
  {21.34,17.76},{95.33,132.11},{ 5.91,26.46},{ 8.63,27.99},
  {56.80,94.61},{26.43,45.11},{74.75,113.30},{51.26,79.27},
  {21.82,53.75},{40.88,59.07},{94.01,138.28},{26.81,59.37},
  { 2.04,27.04},{ 0.83,31.40},{27.32,56.47},{45.32,65.58},
  {79.32,113.38},{34.47,78.50},{92.67,128.81},{80.80,121.53},
  {61.06,91.32},{50.41,67.67},{10.77,36.49},{67.99,81.36},
  {88.68,113.55},{33.52,62.27},{ 1.08,24.74},{80.01,122.53},
  {31.67,65.53},{85.19,130.44},{ 0.77,19.15},{89.08,114.17},
  {21.66,46.48},{69.49,82.41},{61.04,89.87},{ 5.72,21.41},
  {19.06,42.45},{ 4.17,42.37},{ 0.99,10.81},{14.68,35.05},
  { 4.99,18.30},{ 7.36,16.46},{78.91,105.30},{93.95,124.21},
  {100.00,136.63},{51.61,61.62},{43.00,69.13},{63.03,88.55},
  {36.53,59.75},{ 6.33,29.01},{14.40,39.27},{10.56,34.15},
  {60.78,84.60},{74.17,107.20},{93.22,125.73},{73.19,102.78},
  {73.69,119.34},{76.61,119.58},{64.62,103.72},{ 3.58,42.89},
  { 3.70,28.60},{59.90,103.63},{25.04,32.87},{33.30,61.15},
  {82.17,108.08},{21.05,45.59},{92.39,122.95},{36.16,60.36},
  {11.03,36.97},{13.22,36.14},{60.13,76.32},{83.46,124.89},
  {14.41,21.02},{52.74,64.84},{34.79,82.03},{ 6.45,22.28},
  {39.04,78.49},{34.47,77.62},{77.65,107.86},{68.92,104.27},
  {83.66,126.07},{73.71,108.03},{99.49,128.64},{20.40,29.34},
  {47.10,85.32},{50.08,95.50},{57.79,85.87},{68.64,88.78},
  {18.28,31.92},{94.93,132.10},{75.91,118.42},{52.44,98.29},
  {41.50,82.66},{35.20,60.33},{ 4.59,22.95},{69.59,96.93},
  {95.25,106.01},{67.66,83.56},{24.95,43.15},{51.30,85.67},
  { 8.16,31.35},{89.51,115.50},{57.45,93.59},{61.25,79.41},
  {36.11,67.27},{63.62,76.90},{25.05,46.96},{98.63,140.52},
  {38.20,61.35},{82.17,110.23},{91.80,130.51},{23.46,34.14},
  {28.69,59.78},{80.37,110.30},{22.98,49.50},{81.45,115.47},
  {65.30,88.34},{27.80,39.05},{14.01,40.09},{52.15,83.80},
  {38.40,65.55},{82.81,105.29},{81.99,110.37},{41.79,72.49},
  {44.33,75.58},{47.01,45.33},{ 5.83,29.35},{ 2.29,32.71},
  {75.72,106.93},{16.94,37.05},{75.13,106.95},{61.29,81.25},
  {32.39,67.85},{10.23,29.27},{73.17,100.21},{53.18,61.52},
  {24.67,68.88},{77.58,91.34},{25.30,52.28},{26.38,52.74},
  {53.29,71.48},{19.69,51.62},{ 7.70,39.60},{29.29,27.72},
  {34.88,57.87},{57.03,85.70},{54.31,75.57},{81.47,117.07},
  {81.32,122.73},{49.85,67.42},{32.83,54.57},{96.22,127.49},
  { 3.78,38.54},{10.00,32.70},{69.32,82.03},{86.24,118.27},
  {27.30,52.15},{68.97,91.07},{ 3.00,15.18},{22.55,46.72},
  {31.24,44.39},{21.94,38.05},{41.44,88.59},{46.38,59.47},
  {30.15,42.52},{25.62,52.26},{15.42,21.72},{61.17,83.81},
  {10.64,30.16},{39.44,64.41},{64.47,98.59},{51.33,72.18},
  {17.57,37.48},{90.95,112.74},{42.50,68.30},{30.56,52.87},
  {94.20,129.71},{39.48,96.10},{18.10,56.08},{81.82,108.69},
  {82.48,111.07},{ 9.75,33.80},{97.59,154.67},{92.91,134.82},
  {83.12,115.90},{15.07,27.32},{15.89,35.83},{37.49,45.31},
  {35.33,52.15},{11.79,51.97},{21.24,53.10},{23.46,46.41},
  {91.25,103.18},{ 3.22,18.29},{61.34,91.95},{13.72,33.87},
  { 1.50,20.67},{66.44,88.43},{12.19,25.51},{ 5.04,22.43},
  {54.84,73.64},{ 0.91,29.46},{24.01,37.39},{43.58,71.70},
  { 1.05,34.71},{ 4.78,30.06},{31.24,54.32},{43.06,63.35},
  {76.06,122.94},{72.03,105.72},{63.84,104.24},{78.65,108.80},
  { 8.68,27.78},{34.49,55.87},{42.96,78.50},{ 4.78,29.24},
  {98.35,117.30},{71.51,101.22},{ 9.07,36.52},{ 3.50,29.48},
  {30.98,32.44},{79.06,98.69},{71.42,105.95},{31.56,48.12},
  {69.56,90.41},{54.32,82.87},{40.67,71.09},{78.07,127.38},
  {36.41,34.88},{90.46,93.03},{64.51,94.37},{ 5.08,35.81},
  {80.24,84.89},{16.90,32.21},{96.85,116.67},{83.66,121.00},
  {24.96,56.86},{89.78,124.04},{21.17,54.69},{71.23,107.81},
  {94.23,125.49},{23.86,51.31},{58.21,99.84},{48.92,76.39},
  {92.97,107.36},{ 0.16,27.87},{19.32,34.48},{80.76,106.85},
  {69.42,111.61},{30.92,53.38},{46.97,69.84},{42.56,83.54},
  {49.25,84.35},{36.01,69.16},{53.87,76.37},{44.73,63.01},
  {20.17,42.39},{14.86,44.10},{ 7.31,12.73},{47.19,72.44},
  {10.68,49.94},{71.65,98.00},{54.65,80.12},{18.59,23.07},
  { 4.60,33.50},{ 2.61,20.14},{45.31,77.87},{17.52,48.43},
  {15.85,38.14},{ 9.65,21.64},{72.56,104.31},{37.31,63.82},
  {65.48,80.89},{48.59,86.68},{95.18,138.03},{92.82,119.74},
  { 3.77,37.56},{57.56,65.68},{54.57,78.04},{75.31,94.96},
  {92.60,114.52},{22.87,49.84},{51.50,60.01},{25.48,48.84},
  {99.64,129.45},{47.48,80.94},{75.31,111.03},{59.01,98.02},
  {55.87,81.46},{11.50,35.46},{ 6.08,41.66},{41.11,65.25},
  {91.66,139.73},{21.83,56.06},{92.91,116.59},{ 4.32,24.83},
  {88.64,108.65},{92.98,128.40},{57.56,79.54},{16.96,36.44},
  {78.40,103.64},{68.61,94.30},{98.54,116.83},{42.03,61.92},
  {98.69,124.92},{12.86,25.12},{19.05,46.78},{66.49,87.16},
  {94.29,144.59},{ 1.18,22.00},{ 3.06,27.76},{73.92,92.69},
  {72.86,103.19},{66.47,80.87},{91.06,126.61},{51.63,66.71},
  {18.32,45.90},{34.19,63.55},{65.13,91.03},{52.02,82.24},
  {82.21,110.30},{39.83,66.85},{39.98,63.95},{ 7.42,23.19},
  {68.42,98.65},{76.47,101.45},{77.95,95.70},{57.43,74.01},
  {99.69,121.68},{85.49,102.19},{95.89,141.67},{52.49,90.14},
  {71.04,105.66},{78.45,97.62},{15.45,29.59},{77.37,96.45},
  {20.78,31.91},{68.47,97.41},{91.68,154.65},{77.84,122.72},
  {97.42,134.74},{35.60,64.12},{30.43,68.77},{23.98,62.88},
  {52.99,69.30},{13.71,33.76},{ 0.47,35.47},{44.49,97.48},
  {25.96,49.84},{90.30,113.83},{18.73,31.82},{85.92,132.45},
  {41.04,46.54},{19.13,52.85},{15.21,47.24},{35.76,63.73},
  {63.80,92.87},{67.86,103.06},{42.23,51.51},{ 7.81,24.40},
  {95.47,120.92},{53.93,81.25},{69.69,88.42},{74.96,111.96},
  { 0.35,20.67},{72.22,110.94},{49.69,70.18},{60.38,87.11},
  {15.20,46.95},{35.31,64.94},{76.55,103.84},{50.15,81.32},
  {50.50,79.17},{84.04,102.97},{54.71,72.36},{68.82,104.53},
  {68.71,115.63},{ 8.82,46.92},{35.64,68.14},{ 1.11,16.23},
  {80.82,66.56},{81.82,114.54},{ 3.75,36.98},{ 1.37,21.64},
  {20.76,49.26},{57.50,99.48},{21.19,48.76},{56.92,83.29},
  {28.33,57.76},{28.84,47.03},{ 3.68,25.39},{27.33,62.86},
  {32.22,63.42},{13.22,20.15},{99.73,134.30},{63.74,88.08},
  {77.61,95.02},{46.29,84.98},{88.16,112.82},{59.57,82.75},
  {63.52,75.94},{31.06,39.00},{78.91,100.59},{98.65,132.27},
  {10.64,19.74},{86.04,120.66},{17.38,47.42},{27.65,42.08},
  {38.55,45.27},{37.31,74.46},{17.31,41.38},{28.84,50.65},
  {39.58,70.88},{ 7.92,45.41},{48.89,57.46},{48.27,90.10},
  {38.17,47.60},{31.04,63.54},{31.74,68.55},{57.28,91.95},
  {54.32,55.74},{18.39,21.03},{10.59,29.60},{53.01,93.19},
  { 7.74,25.92},{26.83,44.16},{85.85,121.92},{38.44,51.34},
  {87.72,132.06},{14.20,59.38},{37.50,72.42},{ 0.94, 2.67},
  {69.74,95.31},{70.99,113.89},{18.66,60.25},{60.82,75.04},
  {22.82,31.64},{57.24,86.33},{47.65,72.55},{22.61,53.97},
  {80.73,125.89},{81.44,119.37},{49.19,81.53},{38.72,66.67},
  {62.41,83.58},{99.93,139.37},{ 3.49,40.10},{99.11,135.71},
  { 8.39,40.06},{53.44,79.68},{60.08,90.08},{77.55,114.22},
  {87.37,107.09},{ 6.65,36.51},{17.93,37.49},{70.91,100.51},
  {33.44,72.14},{26.15,50.27},{65.23,94.54},{91.24,126.53}
};
double residual_error(double x, double y, double m, double c) {
  double e = (m * x) + c - y;
  return e * e;
}

__device__ double d_residual_error(double x, double y, double m, double c){
  double e = (m * x) + c - y;
  return e * e;
}

double rms_error(double m, double c) {
  int i;
  double mean;
  double error_sum = 0;
 
  for(i=0; i<n_data; i++) {
    error_sum += residual_error(data[i].x, data[i].y, m, c);  
  }
 
  mean = error_sum / n_data;
 
  return sqrt(mean);
}

__global__ void d_rms_error(double *m, double *c, double *error_sum_arr, point_t *d_data)
{
int i = threadIdx.x + blockIdx.x * blockDim.x;
error_sum_arr[i] = d_residual_error(d_data[i].x, d_data[i].y, *m, *c);
}
int time_difference(struct timespec *start, struct timespec *finish,
                              long long int *difference) {
  long long int ds =  finish->tv_sec - start->tv_sec;
  long long int dn =  finish->tv_nsec - start->tv_nsec;

  if(dn < 0 ) {
    ds--;
    dn += 1000000000;
  }
  *difference = ds * 1000000000 + dn;
  return !(*difference > 0);
}

int main() {
  int i;
  double bm = 1.3;
  double bc = 10;
  double be;
  double dm[8];
  double dc[8];
  double e[8];
  double step = 0.01;
  double best_error = 999999999;
  int best_error_i;
  int minimum_found = 0;

  double om[] = {0,1,1, 1, 0,-1,-1,-1};
  double oc[] = {1,1,0,-1,-1,-1, 0, 1};

struct timespec start, finish;  
  long long int time_elapsed;


  clock_gettime(CLOCK_MONOTONIC, &start);

cudaError_t error;


//Device variables
double *d_dm;
  double *d_dc;

double *d_error_sum_arr;
point_t *d_data;

  be = rms_error(bm, bc);


error = cudaMalloc(&d_dm, (sizeof(double) * 8));
  if(error){
    fprintf(stderr, "cudaMalloc on d_dm returned %d %s\n", error,
    cudaGetErrorString(error));
    exit(1);
  }

//Allocate memory for d_dc
error = cudaMalloc(&d_dc, (sizeof(double) * 8));
  if(error){
    fprintf(stderr, "cudaMalloc on d_dc returned %d %s\n", error,
   cudaGetErrorString(error));
    exit(1);
  }

        error = cudaMalloc(&d_error_sum_arr, (sizeof(double) * 1000));
  if(error){
    fprintf(stderr, "cudaMalloc on d_error_sum_arr returned %d %s\n", error,
     cudaGetErrorString(error));
    exit(1);
  }

//Allocate memory for d_data
error = cudaMalloc(&d_data, sizeof(data));
  if(error){
    fprintf(stderr, "cudaMalloc on d_data returned %d %s\n", error,
     cudaGetErrorString(error));
    exit(1);
  }

  while(!minimum_found) {
    for(i=0;i<8;i++) {
      dm[i] = bm + (om[i] * step);
      dc[i] = bc + (oc[i] * step);    
    }

//Copy memory for dm to d_dm
  error = cudaMemcpy(d_dm, dm, (sizeof(double) * 8), cudaMemcpyHostToDevice);  
  if(error){
    fprintf(stderr, "cudaMemcpy to d_dm returned %d %s\n", error,
      cudaGetErrorString(error));
  }

//Copy memory for dc to d_dc
  error = cudaMemcpy(d_dc, dc, (sizeof(double) * 8), cudaMemcpyHostToDevice);  
  if(error){
    fprintf(stderr, "cudaMemcpy to d_dc returned %d %s\n", error,
      cudaGetErrorString(error));
  }

//Copy memory for data to d_data
  error = cudaMemcpy(d_data, data, sizeof(data), cudaMemcpyHostToDevice);  

if(error){
    fprintf(stderr, "cudaMemcpy to d_data returned %d %s\n", error,
      cudaGetErrorString(error));
  }

   for(i=0;i<8;i++) {

//Host variable storing the array returned from the kernel function.
double h_error_sum_arr[1000];

//Stores the total sum of the values from the error sum array.
double error_sum_total;

//Stores the mean of the total sum of the error sums.
double error_sum_mean;

//Call the rms_error function using 100 blocks and 10 threads.
d_rms_error <<<100,10>>>(&d_dm[i], &d_dc[i], d_error_sum_arr, d_data);
cudaThreadSynchronize();




//Copy memory for d_error_sum_arr
 error = cudaMemcpy(&h_error_sum_arr, d_error_sum_arr, (sizeof(double) * 1000), cudaMemcpyDeviceToHost);  
 if(error){
   fprintf(stderr, "cudaMemcpy to error_sum returned %d %s\n", error,
     cudaGetErrorString(error));
 }

//Loop through the error sum array returned from the kernel function
for(int j=0; j<n_data; j++) {
//Add each error sum to the error sum total.
    error_sum_total += h_error_sum_arr[j];
  }

//Calculate the mean for the error sum.
error_sum_mean = error_sum_total / n_data;

//Calculate the square root for the error sum mean.
e[i] = sqrt(error_sum_mean);


  if(e[i] < best_error) {
        best_error = e[i];
        best_error_i = i;
      }

//Reset the error sum total.
error_sum_total = 0;
    }

    //printf("best m,c is %lf,%lf with error %lf in direction %d\n",
      //dm[best_error_i], dc[best_error_i], best_error, best_error_i);

    if(best_error < be) {
      be = best_error;
      bm = dm[best_error_i];
      bc = dc[best_error_i];
    } else {
      minimum_found = 1;
    }

  }

//Free memory for d_dm
error = cudaFree(d_dm);
if(error){
fprintf(stderr, "cudaFree on d_dm returned %d %s\n", error,
  cudaGetErrorString(error));
exit(1);
}

//Free memory for d_dc
error = cudaFree(d_dc);
if(error){
fprintf(stderr, "cudaFree on d_dc returned %d %s\n", error,
cudaGetErrorString(error));
exit(1);
}

//Free memory for d_data
error = cudaFree(d_data);
if(error){
fprintf(stderr, "cudaFree on d_data returned %d %s\n", error,
  cudaGetErrorString(error));
exit(1);
}

//Free memory for d_error_sum_arr
error = cudaFree(d_error_sum_arr);
if(error){
fprintf(stderr, "cudaFree on d_error_sum_arr returned %d %s\n", error,
  cudaGetErrorString(error));
exit(1);
}

  printf("minimum m,c is %lf,%lf with error %lf\n", bm, bc, be);

//Get the system time after we have run the linear regression function.
clock_gettime(CLOCK_MONOTONIC, &finish);

//Calculate the time spent between the start time and end time.
  time_difference(&start, &finish, &time_elapsed);

//Output the time spent running the program.
  printf("Time elapsed was %lldns or %0.9lfs\n", time_elapsed,
         (time_elapsed/1.0e9));

  return 0;
}
